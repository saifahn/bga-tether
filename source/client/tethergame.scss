/*
 *------
 * BGA framework: Gregory Isabelli & Emmanuel Colin & BoardGameArena
 * TetherGame implementation : © Sean Li 9913851+saifahn@users.noreply.github.com
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 */

/*
	This is the CSS stylesheet of your game User Interface.
	
	Styles defined on this file will be applied to the HTML elements you define in your
	HTML template (*.tpl), and to HTML elements you create dynamically (in tethergame.js).
	
	Usually, you are using CSS to:
	
	1°) define the overall layout of your game (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

	2°) create your CSS-sprites: All images of your games should be gathered into a small number of image files. Then, using background-image and background-position CSS properties, you create HTML blocks that can  display these images correctly (see example below).
	
	3°) ... anything else: It is really easy to add and remove CSS classes dynamically from your Javascript with dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why, very often, using CSS classes for the logic of your user interface allow you to do complex thing easily.
*/

@use 'sass:math';
@use 'sass:list';

// calculated from the cards.jpg sprite sheet
$card-width: math.div(1600px, 8);
$card-height: math.div(1955px, 7);

#adrift-zone {
  padding: 20px 36px;
  margin: 16px;
  display: flex;
  gap: 40px;
  flex-wrap: wrap;
  justify-content: center;
  border-radius: 4px;
  border: 2px dashed rgb(61, 61, 61);
}

#hand {
  width: fit-content;
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  padding: 10px;
  background-color: cornsilk;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

#groups {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  padding: 1rem;
}

.group {
  padding: 1rem;
  border: 4px dashed darkslateblue;
  border-radius: 4px;
  height: fit-content;
  display: flex;

  &--flipped {
    transform: rotate(180deg);
  }
}

.column {
  display: flex;
  flex-direction: column;
}

.deck-stack {
  zoom: 0.75;
  position: relative;
  flex-basis: 250px;
}

.deck-card {
  position: absolute;
  border: 1px solid black;
  border-radius: 10px;
  width: $card-width;
  height: $card-height;
  transform: rotate(90deg);
  background-size: contain;
  margin: -40px 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

  &--top {
    background-image: url('img/card-back.jpg');
  }

  &:nth-child(1) {
    box-shadow: 0 22px 44px -10px rgba(0, 0, 0, 0.28);
    top: 0;
    z-index: 4;
  }

  &:nth-child(2) {
    top: 4px;
    background-color: #e1e1e1;
    z-index: 3;
  }

  &:nth-child(3) {
    top: 8px;
    background-color: #e1e1e1;
    box-shadow: 0 9px 14px -10px rgba(0, 0, 0, 0.14);
    z-index: 2;
  }

  &:nth-child(n + 4) {
    top: 12px;
    background-color: #e1e1e1;
    box-shadow: 0 9px 14px -10px rgba(0, 0, 0, 0.14);
    opacity: 0;
    z-index: 1;
  }
}

.card {
  zoom: 0.75;
  border-radius: 10px;
  width: $card-width;
  height: $card-height;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

  &--flipped {
    transform: rotate(180deg);
  }

  &--adrift {
    transform: rotate(90deg);
    margin: -40px 20px;
  }

  &--selectable {
    outline: 0.25rem dashed black;
    cursor: pointer;
  }

  &--selected {
    outline: 0.4rem solid yellowgreen;
  }

  &--blank {
    opacity: 0;
  }
}

$id-list: '01', '02', '03', '04', '05', '06', '07', '08', '09', '11', '12', '13',
  '14', '15', '16', '17', '18', '19', '22', '23', '24', '25', '26', '27', '28',
  '29', '33', '34', '35', '36', '37', '38', '39', '44', '45', '46', '47', '48',
  '49', '55', '56', '57', '58', '59', '66', '67', '68', '69', '77', '78', '79',
  '88', '89';

@for $i from 1 through list.length($id-list) {
  $id: list.nth($id-list, $i);
  // 0-indexed
  $column: ($i - 1) % 8;
  $row: math.floor(calc(($i - 1) / 8));

  #card-#{$id} {
    background-image: url('img/cards.jpg');
    background-position: left
      calc($column / 7 * 100%)
      top
      calc($row / 6 * 100%);
  }
}
